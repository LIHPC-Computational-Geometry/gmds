//
// Created by calderans on 7/2/25.
//

#include <fstream>
#include "gmds/aero/BLKWriter.h"
using namespace gmds;
/*----------------------------------------------------------------------------*/
BLKWriter::BLKWriter(Blocking3D *bl): m_blocking(bl) {

}
/*----------------------------------------------------------------------------*/
BLKWriter::~BLKWriter() {}
/*----------------------------------------------------------------------------*/
void BLKWriter::write(const std::string &AFilename){

	std::ofstream str(AFilename, std::ios::out);
	if (!str){
		std::string s ="Impossible to create a BLK File: "+AFilename;
		throw GMDSException(s);
	}

	str << "# Mgx DataFile Version 0.1\n";
	str << "Generated by GMDS Writer\n\n";
	str << "ASCII\n";

	int nb_Nodes = m_blocking->getNbNodes();

	str  << "POINTS " << nb_Nodes << "\n";

	auto blk_node_id = 0;
	for (auto id : m_blocking->nodes()) {
		Node n = m_blocking->get<Node>(id);
		str << n.X() << " " << n.Y() << " " << n.Z() << "\n";
		m_node_ids_mapping[n.id()] = blk_node_id++;
	}
	str <<"\n\n";


	int nb_Edges = m_blocking->getNbEdges();

	str  << "EDGES " << nb_Edges << "\n";

	auto blk_edge_id = 0;
	for (auto id : m_blocking->edges()) {
		Edge e = m_blocking->get<Edge>(id);
			int n0 = m_node_ids_mapping[e.getIDs<Node>()[0]];
			int n1 = m_node_ids_mapping[e.getIDs<Node>()[1]];
			str << n0 <<  " " << n1 << "\n";
			m_edge_ids_mapping[e.id()] = blk_edge_id++;
		}
	str  << "Discr " << nb_Edges << "\n";
	for (auto id : m_blocking->edges()) {
		str << 0 << " " << m_blocking->getEdgeDiscretization(id) << "\n";
	}
	str <<"\n\n";


	int nb_Faces = m_blocking->getNbFaces();

	str  << "FACES " << nb_Faces << "\n";
	auto blk_face_id = 0;
	for(auto id : m_blocking->faces()){
		Face f = m_blocking->get<Face>(id);
		m_face_ids_mapping[f.id()] = blk_face_id++;
		int e0 = m_edge_ids_mapping[f.getIDs<Edge>()[0]];
		int e1 = m_edge_ids_mapping[f.getIDs<Edge>()[1]];
		int e2 = m_edge_ids_mapping[f.getIDs<Edge>()[2]];
		int e3 = m_edge_ids_mapping[f.getIDs<Edge>()[3]];

		str << "[ "<<e0 <<" ] [ "<<e1 <<" ] ";
		str << "[ "<<e2 <<" ] [ "<<e3 <<" ]";
		str << "\n";
	}
	str <<"\n\n";


	int nb_blocs = m_blocking->getNbRegions();

	str  << "BLOCKS " << nb_blocs << "\n";
	for(auto id : m_blocking->regions()){
		Region b = m_blocking->get<Region>(id);

		//On donne l'ordre 0,4,3,7,1,5,2,6 pour correspondre Ã  l'ordre MGX
		int v0 = m_node_ids_mapping[b.getIDs<Node>()[0]];
		int v1 = m_node_ids_mapping[b.getIDs<Node>()[4]];
		int v2 = m_node_ids_mapping[b.getIDs<Node>()[3]];
		int v3 = m_node_ids_mapping[b.getIDs<Node>()[7]];
		int v4 = m_node_ids_mapping[b.getIDs<Node>()[1]];
		int v5 = m_node_ids_mapping[b.getIDs<Node>()[5]];
		int v6 = m_node_ids_mapping[b.getIDs<Node>()[2]];
		int v7 = m_node_ids_mapping[b.getIDs<Node>()[6]];

		int f0 = m_face_ids_mapping[b.getIDs<Face>()[0]];
		int f1 = m_face_ids_mapping[b.getIDs<Face>()[1]];
		int f2 = m_face_ids_mapping[b.getIDs<Face>()[2]];
		int f4 = m_face_ids_mapping[b.getIDs<Face>()[4]];
		int f3 = m_face_ids_mapping[b.getIDs<Face>()[3]];
		int f5 = m_face_ids_mapping[b.getIDs<Face>()[5]];

		str << v0 << " " << v1 << " " << v2 << " " << v3 << " ";
      str << v4 << " " << v5 << " " << v6 << " " << v7 ;
		str << " [ " <<  f0 << " ] [ " << f1 << " ] [ "<< f2 << " ]";
		str << " [ " <<  f3 << " ] [ " << f4 << " ] [ "<< f5 << " ]";
		str << "\n";
	}
}